{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Base Extension","text":"<p>\u2757 This is a legacy release. This version won't be updated.</p> <p>Please update to <code>PyBackport</code> to continue using a maintained version. <code>pybase-ext</code> will be deprecated when <code>py-backport</code> has its major release v1.0.</p>"},{"location":"#about","title":"About","text":"<p>Python Base Extension main goal is to backport functionalities from newer python releases. It allows using its modules just as the original ones, with the only difference at the import.</p> <p>Any backported (or experimental) functionality can be imported with the module <code>pybase_ext</code>.</p> <pre><code>from pybase_ext import enum\n\n\nclass Number(enum.IntEnum):\n    \"\"\"Enumeration using the original 'IntEnum' call\"\"\"\n    ONE = enum.auto()\n    TWO = 2\n\n\nclass Animal(enum.StrEnum):\n    \"\"\"Supported original 'StrEnum' for python versions &lt; 3.11\"\"\"\n    CAT = enum.auto()\n    DOG = \"dog\"\n\n\nclass Color(enum.TupleEnum):\n    \"\"\"Experimental 'TupleEnum' class\"\"\"\n    BLACK = (0, 0, 0)\n    WHITE = (255, 255, 255)\n</code></pre>"},{"location":"#installation","title":"Installation","text":""},{"location":"#with-pip-recommended","title":"with pip recommended","text":"<p>PyBaseExtension is published as a Python package in PyPI and can be installed via pip.</p> <pre><code>pip install pybase-ext\n</code></pre>"},{"location":"#with-git","title":"with git","text":"<p>PyBaseExtension can be directly used from GitHub by cloning the repository and installing locally.  <pre><code>git clone https://github.com/Jtachan/PyBaseExtension.git\npip install -e py-backport\n</code></pre></p> <p>Alternatively, any pip-install-git command can be called over the repository.</p> <pre><code>pip install git+https://github.com/Jtachan/PyBaseExtension.git\n</code></pre> <p>Latest unreleased changes are also installable by installing the develop branch. Before doing so, consider that they might be breaking changes.</p> <pre><code>pip install git+https://github.com/Jtachan/PyBaseExtension.git@develop\n</code></pre>"},{"location":"#modules-index","title":"Modules index","text":"<ul> <li>All modules<ul> <li>enum</li> <li>colors</li> </ul> </li> <li>Backports<ul> <li>enum</li> </ul> </li> <li>Experimental<ul> <li>enum</li> </ul> </li> </ul>"},{"location":"colors/","title":"PyBase Extension: Colors","text":"<p><code>pybase_ext.colors</code> allows easy import and use color codes, commonly used in computer vision applications.</p> <p>The following are the supported classes: * RGB: Contains red-green-blue color codes as tuples of three ints. * BGR: Contains blue-green-red color codes as tuples of three ints.</p> <p>Note: Due to the existing of many color variations, the supported classes only contain the most common color codes. All color codes have been extracted from https://www.rapidtables.com/web/color/RGB_Color.html.</p> <pre><code>&gt;&gt;&gt; from pybase_ext import colors\n&gt;&gt;&gt; colors.RGB.RED\n(255, 0, 0)\n&gt;&gt;&gt; colors.BGR.RED\n(0, 0, 255)\n&gt;&gt;&gt; [c.name for c, _ in zip(colors.RGB, range(5))]\n['BLACK', 'WHITE', 'RED', 'GREEN', 'BLUE']\n&gt;&gt;&gt; [c for c, _ in zip(colors.RGB, range(5))]\n[(0, 0, 0), (255, 255, 255), (255, 0, 0), (0, 255, 0), (0, 0, 255)]\n</code></pre>"},{"location":"colors/#colorsrgb","title":"colors.RGB","text":"<p>Each member contains RGB color codes.</p> <ul> <li><code>AQUA</code>: (0, 255, 255)</li> <li><code>BLACK</code>: (0, 0, 0) </li> <li><code>BLUE</code>: (0, 0, 255)</li> <li><code>CYAN</code>: (0, 255, 255)</li> <li><code>DARK_GREEN</code>: (0, 128, 0)</li> <li><code>FUCHSIA</code>: (255, 0, 255)</li> <li><code>GRAY</code>: (128, 128, 128)</li> <li><code>GREEN</code>: (0, 255, 0)</li> <li><code>MAGENTA</code>: (255, 0, 255)</li> <li><code>MAROON</code>: (128, 0, 0)</li> <li><code>NAVY</code>: (0, 0, 128)</li> <li><code>OLIVE</code>: (128, 128, 0)</li> <li><code>PURPLE</code>: (128, 0, 128)</li> <li><code>RED</code>: (255, 0, 0)</li> <li><code>SILVER</code>: (192, 192, 192)</li> <li><code>TEAL</code>: (0, 128, 128)</li> <li><code>WHITE</code>: (255, 255, 255)</li> <li><code>YELLOW</code>: (255, 255, 0)</li> </ul>"},{"location":"colors/#colorsbgr","title":"colors.BGR","text":"<p>Each member contains BGR color codes.</p> <ul> <li><code>AQUA</code>: (255, 255, 0)</li> <li><code>BLACK</code>: (0, 0, 0) </li> <li><code>BLUE</code>: (255, 0, 0)</li> <li><code>CYAN</code>: (255, 255, 0)</li> <li><code>DARK_GREEN</code>: (0, 128, 0)</li> <li><code>FUCHSIA</code>: (255, 0, 255)</li> <li><code>GRAY</code>: (128, 128, 128)</li> <li><code>GREEN</code>: (0, 255, 0)</li> <li><code>MAGENTA</code>: (255, 0, 255)</li> <li><code>MAROON</code>: (0, 0, 128)</li> <li><code>NAVY</code>: (128, 0, 0)</li> <li><code>OLIVE</code>: (0, 128, 128)</li> <li><code>PURPLE</code>: (128, 0, 128)</li> <li><code>RED</code>: (0, 0, 255)</li> <li><code>SILVER</code>: (192, 192, 192)</li> <li><code>TEAL</code>: (128, 128, 0)</li> <li><code>WHITE</code>: (255, 255, 255)</li> <li><code>YELLOW</code>: (0, 255, 255)</li> </ul>"},{"location":"enum/","title":"PyBackport: Enumerations","text":"<p><code>pybase_ext</code> allows using the <code>enum</code> module just as the original, with the only difference at the import.</p> <pre><code>from pybase_ext import enum\n\n\nclass Number(enum.IntEnum):\n    \"\"\"Enumeration using the original 'IntEnum' call\"\"\"\n    ONE = enum.auto()\n    TWO = 2\n\n\nclass Animal(enum.StrEnum):\n    \"\"\"Supported original 'StrEnum' for python versions &lt; 3.11\"\"\"\n    CAT = enum.auto()\n    DOG = \"dog\"\n\n\nclass Color(enum.TupleEnum):\n    \"\"\"Experimental 'TupleEnum' class\"\"\"\n    BLACK = (0, 0, 0)\n    WHITE = (255, 255, 255)\n</code></pre>"},{"location":"enum/#backported-classes","title":"Backported classes","text":""},{"location":"enum/#enumintenum","title":"enum.IntEnum","text":"<p>IntEnum is the same as Enum, but its members are also integers and can be used anywhere that an integer can be used.</p> <p>Backported from version 3.11:  <code>__str__()</code> is now <code>int.__str__()</code> to better support the replacement of existing constants use-case. <code>__format__()</code> was already <code>int.__format__()</code> for that same reason.</p>"},{"location":"enum/#enumstrenum","title":"enum.StrEnum","text":"<p>Backported from version 3.11 StrEnum is the same as Enum, but its members are also strings and can be used in most of the same places that a string can be used.</p> <pre><code>&gt;&gt;&gt; from pybase_ext import enum\n&gt;&gt;&gt; class Animal(enum.StrEnum):\n...    CAT = enum.auto()\n...    DOG = \"dog\"\n...\n&gt;&gt;&gt; Animal.CAT\ncat\n&gt;&gt;&gt; Animal.DOG.title()\n'Dog'\n&gt;&gt;&gt; Animal.CAT == \"cat\"\nTrue\n&gt;&gt;&gt; Animal.CAT + Animal.DOG\n'catdog'\n&gt;&gt;&gt; \" and \".join(list(Animals))\n'cat and dog'\n</code></pre> <p>Note: Using <code>auto</code> results in the lower-cased member name as the value.</p>"},{"location":"enum/#enumintflag","title":"enum.IntFlag","text":"<p>IntFlag is the same as Flag, but its members are also integers and can be used anywhere that an integer can be used.</p> <p>Backported from version 3.11:  <code>__str__()</code> is now <code>int.__str__()</code> to better support the replacement of existing constants use-case. <code>__format__()</code> was already <code>int.__format__()</code> for that same reason.</p>"},{"location":"enum/#enumreprenum","title":"enum.ReprEnum","text":"<p>ReprEnum uses the repr() of Enum, but the str() of the mixed-in data type. The class is used for any builtin type enum.</p>"},{"location":"enum/#experimental-classes","title":"Experimental classes","text":""},{"location":"enum/#enumtupleenum","title":"enum.TupleEnum","text":"<p>TupleEnum is the same as Enum, but its members are also tuples and can be used anywhere as tuples can be used.</p> <pre><code>&gt;&gt;&gt; from pybase_ext import enum\n&gt;&gt;&gt; class Color(enum.TupleEnum):\n...    \"\"\"Experimental 'TupleEnum' class\"\"\"\n...    BLACK = (0, 0, 0)\n...    WHITE = (255, 255, 255)\n...\n&gt;&gt;&gt; Color.BLACK\n(0, 0, 0)\n&gt;&gt;&gt; list(Color.WHITE)\n[255, 255, 255]\n</code></pre> <p>Note: Using <code>auto</code> is not supported by TupleEnum, and it will raise a <code>NotImplementedError</code>.</p>"}]}